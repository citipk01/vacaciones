const nombreGrilla 			= "grdPreviExcel_Vacaciones"
const nombreGrillaReporte 	= "grdReporte_VacacionesSol"
const formatDateDB = "DD/MM/YYYY"

'' UTILITARIO ══════════════════════════════════════════════════════════════════════════════════════════════════════════''
	public function  getDateAsString 
		formatDate = "yyyy-MM-dd HH:mm" 'MM/dd/yyyy'
		stringDate = ""
		'stringDate = Format(Now, 		formatDate)
		'stringDate = Format(Date, 		formatDate)
		stringDate = Format(CStr(Now), 	formatDate)     
		getDateAsString = stringDate
	end function


	public function  getBooleanValue (integerValue) 
		if integerValue <> 0 then
				getBooleanValue = true
			else
				getBooleanValue = false
		end if   
	end function

	public function  getYesNoFromBool (booleanValue) 
		if booleanValue = true then
				getYesNoFromBool = "Y"
			else
				getYesNoFromBool = "N"
		end if   
	end function

	public Function getBooleanValue_Excel(valorATransformar)
		valorBooleano = true

		select case UCase(Trim(valorATransformar))
			case "Y", "S", "SI"
				valorBooleano = true
			case "N", "N", "NO", "0"
				valorBooleano = false
		end select
		
		getBooleanValue_Excel = valorBooleano
	End Function

	
	public Function esSoloLetras(textoVerificar)
		Set rex = New RegExp
		ONLY_LETTERS = "[^a-zA-Z]"
		rex.Pattern = ONLY_LETTERS
		esSoloLetras = rex.Test(textoVerificar)
	End Function

	public Function esSoloNrosCommasSpaces(textoVerificar)
		Set rex = New RegExp
		ONLY_NUMBERS = "^[\d \,]*$"
		rex.Pattern = ONLY_NUMBERS
		esSoloNrosCommasSpaces = rex.Test(textoVerificar)
	End Function
'' UTILITARIO VISUAL ═══════════════════════════════════════════════════════════════════════════════════════════════════''
	const msg_OK  		= 0
	const msg_Info  	= 1
	const msg_Warn  	= 2
	const msg_Error 	= 3
	const msg_Question	= 4
	const msg_Input 	= 5

	public function  msg_onWindow (mensaje, tipo)
		mensajeTitulo = "Aviso-Carga de Vacaciones"'""

		select case tipo
			case msg_Info
				msgBox mensaje, vbInformation 	+ vbOkOnly, mensajeTitulo

			case msg_Warn
				msgBox mensaje, vbExclamation 	+ vbOkOnly, mensajeTitulo

			case msg_Error
				msgBox mensaje, vbCritical 		+ vbOkOnly, mensajeTitulo
				
			case msg_Question
				answer = msgBox(mensaje ,vbExclamation 	+ vbYesNo , mensajeTitulo)
				if  answer = vbYes Then
						msg_onWindow = true
						exit function
					else
						msg_onWindow = false
						exit function
				end if

			case msg_Input
				inputBox mensaje, mensajeTitulo, mensaje

		end select
		''	
	end function


	sub msg_onFormControl (mensaje, tipo) 
		reemplazarTexto = true
		nombreControl_MostrarMensaje		 =	"txtEstadoImportacion_info"


		if reemplazarTexto = true then
			obj.controles(nombreControl_MostrarMensaje).TEXTO =	mensaje
		else
			anteriorTexto = obj.controles(nombreControl_MostrarMensaje).TEXTO 
			textoSeparador = vbNewLine & "____________________________" & vbtab & vbNewLine 
			obj.controles(nombreControl_MostrarMensaje).TEXTO = mensaje & textoSeparador & anteriorTexto
		end if
		''const COLOR_ROJO  	= #c84637 '' rgb (200, 70, 55) 
		''const COLOR_VERDE	= RGB (0, 155,  80)
		''const COLOR_AMARILLO= &e1c846& ''RGB (225, 200, 70) ''vbYellow
		''const COLOR_AZUL	= vbBlue ''RGB (0, 155,  80)


		select case tipo
			case msg_OK
				obj.controles(nombreControl_MostrarMensaje).ColorTexto = rgb(10, 150, 15)''rgb(0, 200, 3) 
			case msg_Info
				obj.controles(nombreControl_MostrarMensaje).ColorTexto = rgb(15, 130, 180) ''20, 160, 250
			case msg_Warn
				obj.controles(nombreControl_MostrarMensaje).ColorTexto = rgb(250, 160, 0)''rgb(225, 200, 70)
			case msg_Error
				obj.controles(nombreControl_MostrarMensaje).ColorTexto = rgb(200, 70, 55)
			case msg_Question
				obj.controles(nombreControl_MostrarMensaje).ColorTexto = rgb(190, 100, 180)
			case msg_Input

		end select
		exit sub	
	end sub


	public sub cargarFormatoDeControlesForm
		OBJ.CONTROLES("btnSubirExcel").setFoco() 

		nombreControl_MostrarMensaje		 =	"txtEstadoImportacion_info"
		obj.controles(nombreControl_MostrarMensaje).Texto 	= ""
		obj.controles(nombreControl_MostrarMensaje).refControl.Font.Size 	= 10
		obj.controles(nombreControl_MostrarMensaje).refControl.Font.Bold 	= true
		obj.controles(nombreControl_MostrarMensaje).refControl.Appearance 	= 0
		obj.controles(nombreControl_MostrarMensaje).refControl.BorderStyle 	= 0   

		obj.controles("flt_chkSoloCargaMasiva").Valor = 1
	end sub

	public function pintarFilaDeRojo (nroFila)
		cantColumnasGrilla = 15
		obj.Controles(nombreGrilla).refControl.Cell(7, (nroFila),0,(nroFila),cantColumnasGrilla) = rgb(200, 70, 55) ''vbRed
	end function

	public Function mostrarMensajeErrorGral(cantErroresEncontrados, msgTipoError)
		mensaje = "Hay errores en el archivo que deben ser resueltos para habilitar la importación"  & vbNewLine & vbNewLine & "Por favor, verifique las causas en la columna de Observaciones"
		msg_onWindow 	mensaje, msg_Warn
		
		if cantErroresEncontrados = 1 then
			mensaje = msgTipoError & vbNewLine & "Se encontró "  		& cantErroresEncontrados & " error" 
		else
			mensaje = msgTipoError & vbNewLine & "Se encontraron "  		& cantErroresEncontrados & " errores"
		end if 

		mensaje = msgCantFilasLeidas & vbNewLine & mensaje
		msg_onFormControl	mensaje, msg_Error
	End Function
'' FUNCIONES PÚBLICAS ══════════════════════════════════════════════════════════════════════════════════════════════════''


'' ************************************************************************************************************************
'' ************************************************************************************************************************
'' ************************************************************************************************************************
	public function existenLosNroLegajo_Empresa_DB
		existenTodosLosRegistros = true
		cantFilasGrilla = obj.controles(nombreGrilla).filas
		'Verificar existencia deel nroLegajo cargado'
		FOR i=0 TO (cantFilasGrilla - 1)
			col_COD_MF = obj.controles(nombreGrilla).ValorCelda("col_COD_MF", i)  

			query =	" SELECT COUNT(*) FROM MAEFUNC2" &_
					" WHERE COD_MF = " & col_COD_MF
	        ''msg_onWindow query, msg_Input 
	        Set rs = obj.Conexion.OpenResultset(query , rdOpenForwardOnly)
			IF NOT rs.EOF THEN
				existeRegistro_NroLegajo = false

				if rs.rdoColumns(0).Value = 0 then
					msgObservacion = "El legajo no fue encontrado en los registros de empleados (MAEFUNC2)"
					existenTodosLosRegistros = false
				else
					msgObservacion = "OK-LegajoExistente"
					existeRegistro_NroLegajo = true
				end if 
				'' 'Verificar existencia de la empresa cargada'
				'' if existeRegistro_NroLegajo then
				'' 	col_COD_EMP = obj.controles(nombreGrilla).ValorCelda("col_COD_EMP", i)  
				'' 	query =	" SELECT COUNT(*) FROM QSEMPRESA" &_
				'' 			" WHERE COD_EMP = " & col_COD_EMP
	        	'' 	''msg_onWindow query, msg_Input 
	        	'' 	set rs_empresa = obj.Conexion.OpenResultset(query , rdOpenForwardOnly)
	        	'' 	if rs_empresa.rdoColumns(0).Value = 0 then
		        '' 		msgObservacion = "La empresa no fue encontrada en los registros (QSEMPRESA)"
		        '' 		existenTodosLosRegistros = false
				'' 	else
				'' 		msgObservacion = "OK-Falta validar fechas"
				'' 	end if 
				'' 	rs_empresa.close
				'' end if
			END IF
			rs.close

			obj.controles(nombreGrilla).ValorCelda("COL_OBSERVACIONES", i) = msgObservacion
		NEXT
		
		existenLosNroLegajo_Empresa_DB = existenTodosLosRegistros
	end function

	public function cantErroresValidacionFechasSolicitadas
		cantErroresEncontrados = 0
		huboErroresValidacion = false
		cantFilasGrilla = obj.controles(nombreGrilla).filas
		'Verificar que las fechas sean válidas'
		nroLegajoAnt 	= 0
		periodoAnt 		= 0
		total_cantDiasSolicitadosPorLegajo = 0 
		total_cantSolicitudes_EmpleadoPeriodo = 0
		completoCantDiasPeriodoAnterior = false

		FOR i=0 TO (cantFilasGrilla - 1)
			huboErroresValidacion = false
			'0) Obtiene las fechas de la grilla de previsualización'
				col_COD_MF		= obj.controles(nombreGrilla).ValorCelda("col_COD_MF" , i)		
				col_PERIODO		= obj.controles(nombreGrilla).ValorCelda("col_PERIODO", i)		
				col_COD_EMP		= obj.controles(nombreGrilla).ValorCelda("col_COD_EMP", i)		
				col_FEC_INI		= obj.controles(nombreGrilla).ValorCelda("col_FEC_INI", i)		
				col_FEC_FIN		= obj.controles(nombreGrilla).ValorCelda("col_FEC_FIN", i)		
				cantDiasSolicitados		= CInt(obj.controles(nombreGrilla).ValorCelda("col_CantDias", i))		
				col_PERIODO		= CDate(Format(CStr(col_PERIODO), formatDateDB))
				col_FEC_INI		= CDate(Format(CStr(col_FEC_INI), formatDateDB))
				col_FEC_FIN		= CDate(Format(CStr(col_FEC_FIN), formatDateDB))

			'1) Blanquear los totales y Verificar que la grilla se encuentre ordenada por COD_MF y PERIODO'
				if col_COD_MF <> nroLegajoAnt then 
						if nroLegajoAnt > col_COD_MF  then 
							msgObservacion = "Error: Los registros deben ordenarse por legajo, periodo ascendente"
							obj.controles(nombreGrilla).ValorCelda("COL_OBSERVACIONES", i) = msgObservacion
							pintarFilaDeRojo(i+1)
							exit function
						end if 
						'Reasignación para siguiente empleado'
						nroLegajoAnt 	= col_COD_MF
						periodoAnt 		= col_PERIODO
						total_cantSolicitudes_EmpleadoPeriodo 	= 0
						total_cantDiasSolicitadosPorLegajo		= cantDiasSolicitados
						completoCantDiasPeriodoAnterior = false
					else
						'Mismo empleado, mismo periodo'
						if col_PERIODO = periodoAnt then 
							total_cantDiasSolicitadosPorLegajo		= total_cantDiasSolicitadosPorLegajo 	+ cantDiasSolicitados
							total_cantSolicitudes_EmpleadoPeriodo 	= total_cantSolicitudes_EmpleadoPeriodo + 1
							completoCantDiasPeriodoAnterior = false

						else 
							''mensaje = "periodoAnt: " &periodoAnt & "   - col_PERIODO: "& col_PERIODO
							''msg_onWindow mensaje, msg_Input
							if CDate(periodoAnt) > col_PERIODO  then 
								msgObservacion = "Error: Los registros deben ordenarse por periodo y legajo ascendente"
								obj.controles(nombreGrilla).ValorCelda("COL_OBSERVACIONES", i) = msgObservacion
								pintarFilaDeRojo(i+1)
								exit function
							end if 

							total_cantSolicitudes_EmpleadoPeriodo 	= 0
							total_cantDiasSolicitadosPorLegajo		= cantDiasSolicitados
							periodoAnt 		= col_PERIODO

						end if 
				end if 

			'2) Verifica que exista un registro en la tabla de cabecera CB_VAC'
				if not existeRelacionLegajoPeriodo_CB_VAC(col_COD_MF, col_PERIODO) then 
					msgObservacion = "Error: No se generaron los días calculados para este periodo: " & col_PERIODO & "   -Revisar existencia de registro en CB_VAC"
					obj.controles(nombreGrilla).ValorCelda("COL_OBSERVACIONES", i) = msgObservacion
					huboErroresValidacion = true
				end if 

			'3) Verifica que las fechas solicitadas no se superpongan y que sean válidas'
				'3.1) Valida con los registros existentes en la Base de Datos'
				haySuperposicionDB = verificarSuperposicionFechaDB(col_COD_MF, col_PERIODO, col_FEC_INI, col_FEC_FIN)

				if haySuperposicionDB = true AND huboErroresValidacion=false then
					msgObservacion = "Error: Hay una superposición de días solicitados para las fechas: " &col_FEC_INI& " al " &col_FEC_FIN
					msgObservacion = msgObservacion & vbNewLine & "Revise las fechas de las vacaciones ya registradas"
					obj.controles(nombreGrilla).ValorCelda("COL_OBSERVACIONES", i) = msgObservacion
					huboErroresValidacion = true
				end if

				'3.2) Si hay más de una solicitud (fila excel), Compara con el resto de las filas del excel que estén relacionadas al empleado'
				if total_cantSolicitudes_EmpleadoPeriodo > 0 then
					for j=1 TO total_cantSolicitudes_EmpleadoPeriodo
						col_FEC_INI_Ant = obj.controles(nombreGrilla).ValorCelda("col_FEC_INI", i-j)	
						col_FEC_FIN_Ant = obj.controles(nombreGrilla).ValorCelda("col_FEC_FIN", i-j)
						haySuperposicionGrilla = verificarSuperposicionFechaGrilla(col_FEC_INI, col_FEC_FIN, col_FEC_INI_Ant, col_FEC_FIN_Ant)
						if haySuperposicionGrilla = true AND huboErroresValidacion=false then
							msgObservacion = "Error: Hay una superposición de fechas en el excel. Fechas solicitadas: " &col_FEC_INI& "  a  " &col_FEC_FIN
							obj.controles(nombreGrilla).ValorCelda("COL_OBSERVACIONES", i) = msgObservacion
							huboErroresValidacion = true
						end if
					next
				end if

			'4) Verifica que no se haya superado la fragmentación de las vacaciones'
				saldoDeFragmentacion	= getFromDB_saldoDeFragmentacionDisponible(col_COD_MF, col_PERIODO)
				''mensaje = "MAX_FRAG: " & saldoDeFragmentacion & " - cantSol: "&total_cantSolicitudes_EmpleadoPeriodo
				''msg_onWindow mensaje, msg_Info
				if total_cantSolicitudes_EmpleadoPeriodo > saldoDeFragmentacion AND huboErroresValidacion=false then
					msgObservacion = "No se puede seguir fragmentando las vacaciones porque supera el límite disponible: " & saldoDeFragmentacion
					msgObservacion = "Error: Las vacaciones solicitadas están superando el máximo de fragmentaciones disponibles : " & saldoDeFragmentacion
					obj.controles(nombreGrilla).ValorCelda("COL_OBSERVACIONES", i) = msgObservacion
					huboErroresValidacion = true
				end if 

			'5) Realiza el cálculo de días que se están solicitando y descuenta el saldo disponible (No en la DB)'
				'5.1) Verifica si quedan días pendientes en el periodo anterior o si los está solicitando en esta importación de Excel'
				periodoAnterior = DateAdd("yyyy", -1, col_PERIODO) 
				cantDiasDisponiblesAnterior = getFromDB_cantDiasDisponibles(col_COD_MF, periodoAnterior)
				if cantDiasDisponiblesAnterior > 0 and completoCantDiasPeriodoAnterior = false AND huboErroresValidacion=false then 
					msgObservacion = "Error: Le quedan días pendientes de goce del periodo : " & periodoAnterior
					obj.controles(nombreGrilla).ValorCelda("COL_OBSERVACIONES", i) = msgObservacion
					huboErroresValidacion = true
				end if

				'5.2) Obtiene el saldo de la cant días disponibles para tomarse'
				''cantDiasSolicitados = DateDiff("d", col_FEC_INI, col_FEC_FIN)
				''obj.controles(nombreGrilla).ValorCelda("col_CantDias", i) = cantDiasSolicitados
				cantDiasDisponibles = getFromDB_cantDiasDisponibles(col_COD_MF, col_PERIODO)
				
				if total_cantDiasSolicitadosPorLegajo = cantDiasDisponibles  then  
					completoCantDiasPeriodoAnterior = true
				end if

				if (total_cantDiasSolicitadosPorLegajo > cantDiasDisponibles)  AND huboErroresValidacion=false then 
					msgObservacion = "Error: Se está superando la toma de los días disponibles para el periodo : " & col_PERIODO 
					msgObservacion = msgObservacion & vbNewLine & " - cantDías Disponibles: " & cantDiasDisponibles & " - cant Solicitada: " & total_cantDiasSolicitadosPorLegajo
					obj.controles(nombreGrilla).ValorCelda("COL_OBSERVACIONES", i) = msgObservacion
					huboErroresValidacion = true
				end if

			'Informar resultados de cada fila de la grilla que fue procesada'
				if not huboErroresValidacion then
						msgObservacion = "OK"''"OK: Validación de fechas solicitadas"
						obj.controles(nombreGrilla).ValorCelda("col_COD_EMP", i) = getCodEmpresa(col_COD_MF)
						obj.controles(nombreGrilla).ValorCelda("COL_OBSERVACIONES", i) = msgObservacion
						''cantErroresEncontrados = 0
					else
						pintarFilaDeRojo(i+1)
						cantErroresEncontrados = cantErroresEncontrados + 1 
				end if

		NEXT
		
		cantErroresValidacionFechasSolicitadas = cantErroresEncontrados
	end function

'' FUNCIONES PÚBLICAS: Con DB ════════════════════════════════════════════════════════════════════════════════════════════════''
	public function getFromDB_saldoDeFragmentacionDisponible(col_COD_MF, col_PERIODO)
		cantDisponible = 0

		query =	" SELECT (MAX_FRAG) AS FRAG_A_TOMAR	" 			&_
				"         , (	" 								&_
				"         	SELECT COUNT(*) FROM CB_VAC_SOL	" 	&_
				"         	WHERE COD_MF =  v.COD_MF	" 		&_
				"         	AND PERIODO = v.PERIODO	" 			&_
				"         	) AS CANT_FRAG_TOMADAS	" 			&_
				" FROM CB_VAC v    	" &_
				" WHERE COD_MF = '" 		& col_COD_MF  & "'" &_
				" AND PERIODO = TO_DATE('" 	& col_PERIODO & "', '"&formatDateDB&"')"

		''msg_onWindow query, msg_Input
		Set rs = obj.Conexion.OpenResultset(query , rdOpenForwardOnly)
		IF NOT rs.EOF THEN
				cantFragTomar 	= rs("FRAG_A_TOMAR").Value
				cantFragTomadas = rs("CANT_FRAG_TOMADAS").Value
				cantDisponible 	= CInt(cantFragTomar) - CInt(cantFragTomadas)
		END IF
		rs.close

	 	getFromDB_saldoDeFragmentacionDisponible = cantDisponible
	end function

	public function getFromDB_cantDiasDisponibles(col_COD_MF, col_PERIODO)
		const formatDateDB = "DD/MM/YYYY"
		cantDiasDisponibles = 0

		query =	" SELECT MAX(DIAS_CALCULADOS) FROM CB_VAC "&_
				" WHERE COD_MF = '" 		& col_COD_MF  & "'" 	&_
				" AND PERIODO = TO_DATE('" 	& col_PERIODO & "', '"&formatDateDB&"')"
		Set rs = obj.Conexion.OpenResultset(query , rdOpenForwardOnly)
		IF NOT rs.EOF THEN
				cantDiasDisponibles = rs(0).Value
		END IF
		rs.close

	 	getFromDB_cantDiasDisponibles = cantDiasDisponibles
	end function

	public function existeRelacionLegajoPeriodo_CB_VAC(col_COD_MF, col_PERIODO)
		const formatDateDB = "DD/MM/YYYY"
		tieneRegistrosCabecera = false

		query =	" SELECT COUNT(*) FROM CB_VAC "&_
				" WHERE COD_MF = '" 		& col_COD_MF  & "'" 	&_
				" AND PERIODO = TO_DATE('" 	& col_PERIODO & "', '"&formatDateDB&"')"

		''msg_onWindow query, msg_Input
		Set rs = obj.Conexion.OpenResultset(query , rdOpenForwardOnly)
		IF NOT rs.EOF THEN
				if rs(0).Value <> 0 then
					tieneRegistrosCabecera = true
				else
					tieneRegistrosCabecera = false
			end if
		END IF
		rs.close

	 	existeRelacionLegajoPeriodo_CB_VAC = tieneRegistrosCabecera
	end function

	public function getCodEmpresa(col_COD_MF)
		codEmpresaObtenido = 0

		query =	" SELECT COD_EMP FROM MAEFUNC2 "&_
				" WHERE  COD_MF = '" & col_COD_MF  & "'"

		Set rs = obj.Conexion.OpenResultset(query , rdOpenForwardOnly)
		IF NOT rs.EOF THEN
				codEmpresaObtenido = rs(0).Value
		END IF
		rs.close

		getCodEmpresa = codEmpresaObtenido 
	end function

	public function getFromDB_cantDiasDisponibles(col_COD_MF, col_PERIODO)
		const formatDateDB = "DD/MM/YYYY"
		cantDiasDisponibles = 0

		query =	" SELECT (DIAS_CALCULADOS - DIAS_TOMADOS) " &_
				" FROM CB_VAC "	&_
				" WHERE COD_MF = '" 		& col_COD_MF  & "'" 	&_
				" AND PERIODO = TO_DATE('" 	& col_PERIODO & "', '"&formatDateDB&"')"
		Set rs = obj.Conexion.OpenResultset(query , rdOpenForwardOnly)
		IF NOT rs.EOF THEN
				cantDiasDisponibles = rs(0).Value
		END IF
		rs.close

	 	getFromDB_cantDiasDisponibles = cantDiasDisponibles
	end function

	public function getFromDB_quedanDiasDisponiblesAnteriorPeriodo(col_COD_MF, col_PERIODO)
		quedanDiasDel_AnteriorPeriodo = false

		anioPeriodo = Year(col_PERIODO) ''Format(CStr(PERIODO), "yyyy")
		query =	" SELECT COUNT(*) AS CHKHAYDIAS_DISPONIBLES" &_
				" FROM CB_VAC v" &_
				" WHERE EXTRACT(YEAR from PERIODO) = " &anioPeriodo& " - 1" &_
				" AND COD_MF = " & col_COD_MF &_
				" AND DIAS_CALCULADOS - DIAS_TOMADOS > 0" 

		Set rs = obj.Conexion.OpenResultset(query , rdOpenForwardOnly)
		IF NOT rs.EOF THEN
			if rs(0).Value <> 0 then
					quedanDiasDel_AnteriorPeriodo = false
				else
					quedanDiasDel_AnteriorPeriodo = true
			end if
		END IF
		rs.close

	 	getFromDB_quedanDiasDisponiblesAnteriorPeriodo = quedanDiasDel_AnteriorPeriodo
	 	''return quedanDiasDel_AnteriorPeriodo
	end function


	public function quedaronDiasTomadosEnNegativo(col_COD_MF, col_PERIODO)
		const formatDateDB = "DD/MM/YYYY"
		existenDiasNegativos = false

		query =	" SELECT COUNT(*) FROM CB_VAC "&_
				" WHERE COD_MF = '" 		& col_COD_MF  & "'" 	&_
				" AND PERIODO = TO_DATE('" 	& col_PERIODO & "', '"&formatDateDB&"')" &_
				" AND DIAS_TOMADOS < 0"

		''msg_onWindow query, msg_Input
		Set rs = obj.Conexion.OpenResultset(query , rdOpenForwardOnly)
		IF NOT rs.EOF THEN
				if rs(0).Value = 0 then
					existenDiasNegativos = true
				else
					existenDiasNegativos = false
			end if
		END IF
		rs.close

	 	quedaronDiasTomadosEnNegativo = existenDiasNegativos
	end function

	public function verificarSuperposicionFechaDB(col_COD_MF, col_PERIODO, col_FEC_INI, col_FEC_FIN)
		haySuperposicion = false

		query =	" SELECT COUNT(*) FROM CB_VAC_SOL "&_
				" WHERE COD_MF = '" 		& col_COD_MF  & "'" 	&_
				" AND PERIODO = TO_DATE('" 	& col_PERIODO & "', '"&formatDateDB&"')" &_
				" AND (FEC_INI BETWEEN TO_DATE('"& col_FEC_INI & "', '"&formatDateDB&"') AND TO_DATE('"& col_FEC_FIN & "', '"&formatDateDB&"')" &_
				" 	OR" &_
				" 	FEC_FIN BETWEEN TO_DATE('" 	& col_FEC_INI & "', '"&formatDateDB&"') AND TO_DATE('"& col_FEC_FIN & "', '"&formatDateDB&"')" &_
				" 	OR " &_
				" 	(FEC_INI < TO_DATE('" 	& col_FEC_INI & "', '"&formatDateDB&"') AND FEC_FIN > TO_DATE('"& col_FEC_FIN & "', '"&formatDateDB&"'))" &_
				" 	OR " &_
				" 	(FEC_INI > TO_DATE('" 	& col_FEC_INI & "', '"&formatDateDB&"') AND FEC_FIN < TO_DATE('"& col_FEC_FIN & "', '"&formatDateDB&"'))" &_
				" )" 

		''msg_onWindow query, msg_Input
		Set rs = obj.Conexion.OpenResultset(query , rdOpenForwardOnly)
		IF NOT rs.EOF THEN
			if rs(0).Value <> 0 then
					haySuperposicion = true
			end if
		END IF
		rs.close

	 	verificarSuperposicionFechaDB = haySuperposicion
	end function



	public function verificarSuperposicionFechaGrilla(col_FEC_INI, col_FEC_FIN, col_FEC_INI_Ant, col_FEC_FIN_Ant)
		''mensaje = "" &_
		''	vbNewLine & "col_FEC_INI		: " & col_FEC_INI		&_
		''	vbNewLine & "col_FEC_FIN		: " & col_FEC_FIN		&_
		''	vbNewLine & "col_FEC_INI_Ant	: " & col_FEC_INI_Ant	&_		
		''	vbNewLine & "col_FEC_FIN_Ant	: " & col_FEC_FIN_Ant			
		''msg_onWindow mensaje, msg_Info
		col_FEC_INI = CDate(Format(CStr(col_FEC_INI)		, formatDateDB))
		col_FEC_FIN = CDate(Format(CStr(col_FEC_FIN)		, formatDateDB))
		col_FEC_INI_Ant = CDate(Format(CStr(col_FEC_INI_Ant), formatDateDB))
		col_FEC_FIN_Ant = CDate(Format(CStr(col_FEC_FIN_Ant), formatDateDB))


		haySuperposicion = false

	    if col_FEC_INI >= col_FEC_INI_Ant and col_FEC_INI <= col_FEC_FIN_Ant then
	    		haySuperposicion = true
	    end If  
	    
		if col_FEC_FIN >=  col_FEC_INI_Ant AND col_FEC_FIN <= col_FEC_FIN_Ant then
		    	haySuperposicion = true
	    end If  

	    if col_FEC_INI < col_FEC_INI_Ant AND col_FEC_FIN > col_FEC_FIN_Ant then
	     		haySuperposicion = true
	    end If  

		if col_FEC_INI > col_FEC_INI_Ant AND col_FEC_FIN < col_FEC_FIN_Ant then
		    	haySuperposicion = true
	    end If  


	 	verificarSuperposicionFechaGrilla = haySuperposicion
	end function

''************************************************************************************************************************
''************************************************************************************************************************
''************************************************************************************************************************
''************************************************************************************************************************
''************************************************************************************************************************
public sub btnSubirExcel_Action
	'' 0) Blanqueo-limpieza de controles dependientes
		msg_onFormControl "", msg_Info
		obj.controles("grdPreviExcel_Vacaciones").LimpiarGrilla 
		const nombreControl_GuardarGrillaEnDB 		= "btnGuardarEnBD"
		const nombreControl_DeshacerCambios 		= "btnDB_DeshacerCambiosGrilla"
		const nombreControl_frmGestionImportacion 	= "frmGestionImportacion"
		obj.controles(nombreControl_DeshacerCambios).Visible	= false
		obj.controles(nombreControl_DeshacerCambios).Habilitado	= false
		obj.controles(nombreControl_GuardarGrillaEnDB).habilitado = false
		obj.controles(nombreControl_frmGestionImportacion).refControl.BackColor = rgb(240, 240, 240)

		''obj.controles(nombreControl_DeshacerCambios).Visible	= false
		''obj.controles(nombreControl_DeshacerCambios).Habilitado	= false


	''1) Lectura de archivo y declaración de variables
	set cmd = obj.CommonDialog    
	cmd.ShowOpen                  
	cmd.Filter = "XLS Files(*.xls, *.xlsx)|*.xls;*.xlsx|" 
	obj.Controles("txtArchivoXLS").Texto = cmd.FileName

	Dim headerExcel, mensaje
	mensaje 	= ""
	esUltFila 	= false
	nroFila 	= 2 'Fila 2 porque la uno es la cabecera del excel las siguientes contienen los datops a cargar '
	' Reiniciar el resto de los componentes
	' variables para la lectura de Excel
		cantColumnasExcel = 15
		nroHojaExcel  = 1
		nombreArchivo = obj.controles("txtArchivoXLS").texto

		Set FSO = CreateObject("Scripting.FileSystemObject")
	    nombreArchivoAImportar = FSO.GetFileName(nombreArchivo)
	    ''LOG.info("importando archivo: " + nombreArchivoAImportar);
		Set xlapp = CreateObject("Excel.Application")

	'' Comienza lectura de excel
	mensajeErrorTitulo = "Validación de Archivo Excel"   
	mensajeErrorValida = ""

	if isnull(nombreArchivo) or nombreArchivo = "" then    
		mensajeErrorValida = "No se seleccionó ningún archivo"
		msg_onFormControl mensajeErrorValida, msg_Error
		exit sub
	ELSE
		mensaje = "Archivo Excel seleccionado " & vbNewLine &"[ " & nombreArchivoAImportar & " ]"
		msg_onFormControl mensaje, msg_Info
		
		xlapp.Application.Workbooks.Open nombreArchivo
		nombreDeHoja = xlapp.Worksheets(nroHojaExcel).Name
		'nombreDeHoja = xlapp.Application.Caller.Worksheet.Name
		'nombreDeHoja = ActiveSheet.Name

		mensaje = mensaje & vbNewLine & vbNewLine & "Nombre de Hoja" & vbNewLine & "[ "& nombreDeHoja & " ]"
		msg_onFormControl mensaje, msg_Info



		Dim nroCol_COD_MF
		Dim nroCol_PERIODO
		Dim nroCol_COD_EMP
		Dim nroCol_FEC_INI
		Dim nroCol_FEC_FIN
		Dim nroCol_FEC_PEDIDO
		Dim nroCol_PLUS_VAC
		Dim nroCol_ADE_VAC
		Dim nroCol_MES
		Dim nroCol_ANIO
		Dim nroCol_APROB_VAC

		Dim col_NroFilaExcel
		Dim col_COD_MF
		Dim col_PERIODO
		Dim col_COD_EMP
		Dim col_FEC_INI
		Dim col_FEC_FIN
		Dim col_CantDias
		Dim col_FEC_PEDIDO
		Dim col_PLUS_VAC
		Dim col_ADE_VAC
		Dim col_MES
		Dim col_ANIO
		Dim col_APROB_VAC

		nomCol_COD_MF		= "COD_MF"		+ " : NROLEGAJO"
		nomCol_PERIODO		= "PERIODO"		+ " : FECHAPERIODO"
		nomCol_COD_EMP		= "COD_EMP"		+ " : CODEMPRESA"
		nomCol_FEC_INI		= "FEC_INI"		+ " : FECHAINICIO"
		nomCol_DIAS			= "DIAS"		+ " : CANTDIAS"
		nomCol_FEC_FIN		= "FEC_FIN"		+ " : FECHAFIN"
		nomCol_FEC_PEDIDO	= "FEC_PEDIDO"	+ " : FECHAPEDIDO"
		nomCol_PLUS_VAC		= "PLUS_VAC"	+ " : CHKPLUSVAC"
		nomCol_ADE_VAC		= "ADE_VAC"		+ " : CHKADELANTO"
		nomCol_MES			= "MES"			+ " : MES"
		nomCol_ANIO			= "ANIO"		+ " : ANIO"
		nomCol_APROB_VAC	= "APROB_VAC"	+ " : APROBADO"



		'Valida el nombre de las columnas de la cabecera del Excel y obtiene su posición'
		FOR i = 1 To cantColumnasExcel Step 1  
			headerExcel = xlapp.Worksheets(nroHojaExcel).Cells(1, i).Value
			'mensajeCabecera = "headerExcel: " + headerExcel + "   i: " & i
	        'msg_onWindow  mensajeCabecera, msg_Input
			Select Case UCase(Trim(headerExcel))
				case "COD_MF" 			, "NROLEGAJO"
					nroCol_COD_MF = i
					'Exit Select
					
				case "PERIODO" 			, "FECHAPERIODO"
					nroCol_PERIODO = i
					'Exit Select
					
				case "COD_EMP" 			, "CODEMPRESA"
					nroCol_COD_EMP = i
					'Exit Select
					
				case "FEC_INI" 			, "FECHAINICIO"
					nroCol_FEC_INI = i
					'Exit Select
				case "FEC_FIN" 			, "FECHAFIN"
					nroCol_FEC_FIN = i
					'Exit Select

				case "DIAS" 			, "CANTDIAS"
					nroCol_CantDias = i
					
				case "FEC_PEDIDO" 		, "FECHAPEDIDO"
					nroCol_FEC_PEDIDO = i
					'Exit Select
					
				case "PLUS_VAC" 		, "CHKPLUSVAC"
					nroCol_PLUS_VAC = i
					'Exit Select
					
				case "ADE_VAC" 			, "CHKADELANTO"
					nroCol_ADE_VAC = i
					'Exit Select
					
				case "MES" 				, "MES"
					nroCol_MES = i
					'Exit Select
					
				case "ANIO" 			, "ANIO"
					nroCol_ANIO = i
					'Exit Select
					
				case "APROB_VAC" 		, "APROBADO"
					nroCol_APROB_VAC = i
					'Exit Select
			
			End Select
		NEXT 

		'''	huboErroresFormatoExcel = false
		'''	''1) Verificar ingresos excel
		'''	if huboErroresFormatoExcel then
		'''		'AgregarLineaError("")
		'''		xlapp.Application.Workbooks.close
		'''		xlapp.Workbooks.close
		'''		Set xlApp = Nothing
		'''		exit sub
		'''	end if

		' variables para la validación de formato de Datos
		Dim logErroresExcel, hayErroresFormatoExcel, msgObservacion
		msgObservacion = "OK"
		hayErroresFormatoExcel = false	
		cantErroresEncontrados = 0
		'Lectura de datos excel y pasaje a la grilla
		do while not esUltFila 	

			'Asignación de valores de la fila que se está leyendo'
			col_COD_MF		= xlapp.Worksheets(nroHojaExcel).Cells(nroFila,	nroCol_COD_MF).Value
			col_PERIODO		= xlapp.Worksheets(nroHojaExcel).Cells(nroFila,	nroCol_PERIODO).Value
			''col_COD_EMP		= xlapp.Worksheets(nroHojaExcel).Cells(nroFila,	nroCol_COD_EMP).Value
			col_FEC_INI		= xlapp.Worksheets(nroHojaExcel).Cells(nroFila,	nroCol_FEC_INI).Value
			col_CantDias	= xlapp.Worksheets(nroHojaExcel).Cells(nroFila,	nroCol_CantDias).Value
			'col_FEC_FIN		= xlapp.Worksheets(nroHojaExcel).Cells(nroFila,	nroCol_FEC_FIN).Value
			col_FEC_PEDIDO	= xlapp.Worksheets(nroHojaExcel).Cells(nroFila,	nroCol_FEC_PEDIDO).Value
			col_PLUS_VAC	= xlapp.Worksheets(nroHojaExcel).Cells(nroFila,	nroCol_PLUS_VAC).Value
			col_ADE_VAC		= xlapp.Worksheets(nroHojaExcel).Cells(nroFila,	nroCol_ADE_VAC).Value
			col_MES			= xlapp.Worksheets(nroHojaExcel).Cells(nroFila,	nroCol_MES).Value
			col_ANIO		= xlapp.Worksheets(nroHojaExcel).Cells(nroFila,	nroCol_ANIO).Value
			col_APROB_VAC	= xlapp.Worksheets(nroHojaExcel).Cells(nroFila,	nroCol_APROB_VAC).Value

			'Proceso de validación formato de datos del excel
			hayErroresFormatoExcel = false	
			if isnull(col_COD_MF) or col_COD_MF = "" then
				esUltFila = true
			else
				IF NOT IsNumeric(col_COD_MF) THEN 
					hayErroresFormatoExcel = true
					msgObservacion = "Valor no numérico" & " *Fila: " & (nroFila-1) & ", Columna: "& nomCol_COD_MF 
				END IF     

				IF NOT isDate(col_PERIODO) then
					hayErroresFormatoExcel = true
					msgObservacion = "No es una fecha válida" & " *Fila: " & (nroFila-1) & ", Columna: "& nomCol_PERIODO 
				END IF

				''IF NOT IsNumeric(col_COD_EMP) THEN 
				''	hayErroresFormatoExcel = true
				''	msgObservacion = "Valor no numérico" & " *Fila: " & (nroFila-1) & ", Columna: "& nomCol_COD_EMP 
				''END IF 

				IF NOT isDate(col_FEC_INI) then
					hayErroresFormatoExcel = true
					msgObservacion = "No es una fecha válida" & " *Fila: " & (nroFila-1) & ", Columna: "& nomCol_FEC_INI 
				END IF

				''IF NOT isDate(col_FEC_FIN) then
				''	hayErroresFormatoExcel = true
				''	msgObservacion = "No es una fecha válida" & " *Fila: " & (nroFila-1) & ", Columna: "& nomCol_FEC_FIN 
				''END IF

				IF NOT isDate(col_FEC_PEDIDO) then
					hayErroresFormatoExcel = true
					msgObservacion = "No es una fecha válida" & " *Fila: " & (nroFila-1) & ", Columna: "& nomCol_FEC_PEDIDO 
				END IF
				
				IF NOT IsNumeric(col_CantDias) OR Trim(col_CantDias) = "" THEN 
					hayErroresFormatoExcel = true
					msgObservacion = "Valor no numérico" & " *Fila: " & (nroFila-1) & ", Columna: "& nomCol_DIAS 
				END IF
				IF NOT col_CantDias > 0 THEN 
					hayErroresFormatoExcel = true
					msgObservacion = "La cant. de días debe ser superior a cero" & " *Fila: " & (nroFila-1) & ", Columna: "& nomCol_DIAS 
				END IF
				col_FEC_FIN = DateAdd("d", col_CantDias, col_FEC_INI) 
				''IF isnull(col_PLUS_VAC) or col_PLUS_VAC = "" THEN
				''	hayErroresFormatoExcel = true
				''	msgObservacion = "Falta completar " & "*Fila: " & (nroFila-1) & ", Columna: "& nomCol_PLUS_VAC
				''END IF
				''
				''IF isnull(col_ADE_VAC) or col_ADE_VAC = "" THEN
				''	hayErroresFormatoExcel = true
				''	msgObservacion = "Falta completar " & vbNewLine & "*Fila: " & (nroFila-1) & ", Columna: "& nomCol_ADE_VAC
				''END IF
				''
				''IF isnull(col_APROB_VAC) or col_APROB_VAC = "" THEN
				''	hayErroresFormatoExcel = true
				''	msgObservacion = "Falta completar " & vbNewLine & "*Fila: " & (nroFila-1) & ", Columna: "& nomCol_APROB_VAC
				''END IF
				col_PLUS_VAC	= getBooleanValue_Excel(col_PLUS_VAC)	
				col_ADE_VAC		= getBooleanValue_Excel(col_ADE_VAC)
				col_APROB_VAC	= getBooleanValue_Excel(col_APROB_VAC)	

				if hayErroresFormatoExcel = true then
						cantErroresEncontrados = cantErroresEncontrados + 1
						COL_OBSERVACIONES = msgObservacion
					else
						COL_OBSERVACIONES = "OK: El formato del Excel está validado"
				end if
				
				col_PERIODO		= Format(CStr(col_PERIODO)		, formatDateDB)
				col_FEC_INI		= Format(CStr(col_FEC_INI)		, formatDateDB)
				col_FEC_FIN		= Format(CStr(col_FEC_FIN)		, formatDateDB)

				'Se agregan las filas a la grilla
				col_NroFilaExcel = (nroFila-1)
				obj.controles("grdPreviExcel_Vacaciones").AgregarFila = col_NroFilaExcel & vbtab & col_COD_MF & vbtab &  col_PERIODO &_
					vbtab &  col_COD_EMP & vbtab &  col_FEC_INI & vbtab &  col_FEC_FIN & vbtab &  col_CantDias &_
					vbtab &  col_FEC_PEDIDO & vbtab &  col_MES & vbtab &  col_ANIO & vbtab &  col_APROB_VAC  &_
					vbtab &  col_ADE_VAC    & vbtab &  col_PLUS_VAC & vbtab &  COL_OBSERVACIONES
				'Después de insertar la fila en la grilla de previsualización, pintar de rojo aquellas con errores'
				if hayErroresFormatoExcel = true then
					cantColumnasGrilla = 15
					obj.Controles(nombreGrilla).refControl.Cell(13,(nroFila-1),0,(nroFila-1),cantColumnasGrilla) = vbRed 'El 13 convierte a BOLD'
					obj.Controles(nombreGrilla).refControl.Cell(7, (nroFila-1),0,(nroFila-1),cantColumnasGrilla) = vbRed ''rgb(255, 0, 0)
				end if

				nroFila = nroFila + 1
			end if
			
		loop   

		xlapp.Application.Workbooks.Close
	END IF 
	''----------------------------------------------------------------------------------------------------------------''
	''----------------------------------------------------------------------------------------------------------------''
	mensaje = ""
	msgCantFilasLeidas = "Cantidad de filas leídas: " & (nroFila -  2) & vbNewLine 

	IF cantErroresEncontrados > 0 THEN
		mostrarMensajeErrorGral cantErroresEncontrados, "Error - Formato de Datos Excel"
		obj.controles(nombreControl_GuardarGrillaEnDB).habilitado = false
		obj.controles(nombreControl_frmGestionImportacion).refControl.BackColor = rgb(240, 240, 240)
		exit sub
	ELSE
	    if not existenLosNroLegajo_Empresa_DB then   
	    	mensaje = "Algunos legajos/empresas no fueron encontradas en la BBDD"
	       	msg_onFormControl	mensaje, msg_Error
	       	exit sub
	    end if

		cantErroresEncontrados = cantErroresValidacionFechasSolicitadas
		if cantErroresEncontrados > 0 then
	    	''mensaje = "Se encontraron errores en las fechas solicitadas. Por favor, revise la columna Observaciones para obtener más detalles"
			mostrarMensajeErrorGral cantErroresEncontrados, "Error - Validación de Datos"
	       	exit sub
		end if 
		''aprobarCadaFilaObservaciones-OKAprobadoListoParaImportar
		mensaje = "Se completaron las validaciones del archivo con éxito" & vbNewLine & vbNewLine & "Los registros de la grilla ya están disponibles para ser guardados en la Base de Datos (BBDD)"
		mensaje =  mensaje & vbNewLine & vbNewLine & msgCantFilasLeidas
		msg_onWindow 		mensaje, msg_Info
		msg_onFormControl	mensaje, msg_OK
		obj.controles(nombreControl_frmGestionImportacion).refControl.BackColor = rgb(125, 150, 170)
		obj.controles(nombreControl_GuardarGrillaEnDB).habilitado = true
		obj.controles(nombreControl_GuardarGrillaEnDB).setFoco() 
	END IF

end sub
''----------------------------------------------------------------------------------------------------------------''
''----------------------------------------------------------------------------------------------------------------''
''----------------------------------------------------------------------------------------------------------------''
''----------------------------------------------------------------------------------------------------------------''

	'Se encarga de leer los datos existentes en la tabla CB_VAC_SOL'
	public sub btnFiltrarResultados_Action
		const formatoFechaDB = "DD/MM/YYYY"
		''const nombreGrillaReporte 	= "grdReporte_VacacionesSol"
		esElPrimerFiltro 	= true
		chkSoloCargaMasiva 	= obj.controles("flt_chkSoloCargaMasiva").Valor
		txtNroLegajo 		= obj.controles("flt_txtNroLegajo").Texto
		txtPeriodo 			= obj.controles("flt_txtPeriodo").Texto


		if trim(txtNroLegajo)="" AND trim(txtPeriodo)="" AND trim(chkSoloCargaMasiva)=0 then
			mensaje = "Por favor seleccione algún filtro, para acotar la cantidad de resultados de las solictudes de vacaciones"
			msg_onWindow  mensaje, msg_Warn
			exit sub
		end if 

		if not isDate(txtPeriodo) AND trim(txtPeriodo)<>"" then
			mensaje = "Ingrese una fecha válida"
			msg_onWindow  mensaje, msg_Warn
			exit sub
		end if

		if not esSoloNrosCommasSpaces(textoVerificar) then
		    mensaje = "Los Nros de Legajo deben ser numeros separados por coma"
			msg_onWindow  mensaje, msg_Warn
			exit sub
		end if


		obj.controles(nombreGrillaReporte).limpiargrilla
		query =     " SELECT COD_MF, PERIODO, COD_EMP, FEC_INI, FEC_FIN, DIAS, FEC_PEDIDO " &_
				    " 	, PLUS_VAC, ADE_VAC, MES, ANIO, APROB_VAC, LAST_USR, LAST_HOST " &_
				    "   , (SELECT MAX(mf.NOM_MF) FROM MAEFUNC2 mf " &_
				    "         WHERE mf.COD_MF = vs.COD_MF) AS NOM_MF " &_
				    "   , (SELECT MAX(SOEID) FROM CB_SOEID s  WHERE s.COD_MF = vs.COD_MF ) AS SOEID" &_
				    " FROM CB_VAC_SOL vs " 

		if trim(txtNroLegajo) 	<> "" then
			query = query & " WHERE vs.COD_MF IN ( " & txtNroLegajo & ")"
			esElPrimerFiltro = false
		end if 

		if trim(txtPeriodo) <> "" then
			txtPeriodo	= CDate(Format(CStr(txtPeriodo), 	formatoFechaDB))
			IF esElPrimerFiltro THEN
					query = query & " WHERE PERIODO = TO_DATE('" 	& txtPeriodo & "', '"&	formatoFechaDB&"')"
					esElPrimerFiltro = false
				ELSE 
					query = query & " AND 	PERIODO = TO_DATE('" 	& txtPeriodo & "', '"&	formatoFechaDB&"')"
			END IF
		end if 

		if trim(chkSoloCargaMasiva) <> 0 then
			IF esElPrimerFiltro THEN
					query = query & " WHERE LAST_HOST LIKE 'Cargado el%'"
					esElPrimerFiltro = false
				ELSE 
					query = query & " AND 	LAST_HOST LIKE 'Cargado el%'"
			END IF
		end if 

	    Set rs = obj.Conexion.OpenResultset(query , rdOpenForwardOnly)

	    nroFilasLeidas = 0
	    WHILE NOT rs.EOF
		    db_COD_MF = rs.rdoColumns("COD_MF").Value
			db_NombreApellido	= rs.rdoColumns("NOM_MF").Value
			db_SOEID	= rs.rdoColumns("SOEID").Value
			db_PERIODO = rs.rdoColumns("PERIODO").Value
			db_COD_EMP = rs.rdoColumns("COD_EMP").Value
			db_FEC_INI = rs.rdoColumns("FEC_INI").Value
			db_FEC_FIN = rs.rdoColumns("FEC_FIN").Value
			db_DIAS = rs.rdoColumns("DIAS").Value
			db_FEC_PEDIDO = rs.rdoColumns("FEC_PEDIDO").Value
			db_PLUS_VAC = rs.rdoColumns("PLUS_VAC").Value
			db_ADE_VAC = rs.rdoColumns("ADE_VAC").Value
			db_MES = rs.rdoColumns("MES").Value
			db_ANIO = rs.rdoColumns("ANIO").Value
			db_APROB_VAC = rs.rdoColumns("APROB_VAC").Value
			db_LAST_USR	 		= rs.rdoColumns("LAST_USR").Value
			db_LAST_HOST	 	= rs.rdoColumns("LAST_HOST").Value


			if not isnull(db_LAST_HOST) then 
				db_LAST_HOST	= CStr(db_LAST_HOST)
			end if
			db_PLUS_VAC		= getBooleanValue_Excel(db_PLUS_VAC)	
			db_ADE_VAC		= getBooleanValue_Excel(db_ADE_VAC)
			db_APROB_VAC	= getBooleanValue_Excel(db_APROB_VAC)

		    '-- Ingresa en la grilla de Visualización			
			''	obj.controles(nombreGrillaReporte).ValorCelda("col_COD_MF", nroFilasLeidas)			= db_COD_MF
			''	obj.controles(nombreGrillaReporte).ValorCelda("col_NombreApellido", nroFilasLeidas)	= db_NombreApellido		
			''	obj.controles(nombreGrillaReporte).ValorCelda("col_SOEID", nroFilasLeidas)			= db_SOEID		
			''	obj.controles(nombreGrillaReporte).ValorCelda("col_PERIODO", nroFilasLeidas)		= db_PERIODO	
			''	obj.controles(nombreGrillaReporte).ValorCelda("col_COD_EMP", nroFilasLeidas)		= db_COD_EMP	
			''	obj.controles(nombreGrillaReporte).ValorCelda("col_FEC_INI", nroFilasLeidas)		= db_FEC_INI	
			''	obj.controles(nombreGrillaReporte).ValorCelda("col_FEC_FIN", nroFilasLeidas)		= db_FEC_FIN	
			''	obj.controles(nombreGrillaReporte).ValorCelda("col_CantDias", nroFilasLeidas)		= db_DIAS	
			''	obj.controles(nombreGrillaReporte).ValorCelda("col_FEC_PEDIDO", nroFilasLeidas)		= db_FEC_PEDIDO	
			''	obj.controles(nombreGrillaReporte).ValorCelda("col_PLUS_VAC", nroFilasLeidas)		= db_PLUS_VAC	
			''	obj.controles(nombreGrillaReporte).ValorCelda("col_ADE_VAC", nroFilasLeidas)		= db_ADE_VAC	
			''	obj.controles(nombreGrillaReporte).ValorCelda("col_MES", nroFilasLeidas)			= db_MES
			''	obj.controles(nombreGrillaReporte).ValorCelda("col_ANIO", nroFilasLeidas)			= db_ANIO
			''	obj.controles(nombreGrillaReporte).ValorCelda("col_APROB_VAC", nroFilasLeidas)		= db_APROB_VAC	
			''	obj.controles(nombreGrillaReporte).ValorCelda("col_LAST_USR", nroFilasLeidas)		= db_LAST_USR	
			''	obj.controles(nombreGrillaReporte).ValorCelda("col_LAST_HOST", nroFilasLeidas)		= db_LAST_HOST	




			filaParaAgregar = db_COD_MF			& vbtab &_
							db_NombreApellido	& vbtab &_
							db_SOEID			& vbtab &_
							db_PERIODO			& vbtab &_
							db_COD_EMP			& vbtab &_
							db_FEC_INI			& vbtab &_
							db_FEC_FIN			& vbtab &_
							db_DIAS				& vbtab &_
							db_FEC_PEDIDO		& vbtab &_
							db_MES				& vbtab &_
							db_ANIO				& vbtab &_
							db_PLUS_VAC			& vbtab &_
							db_ADE_VAC			& vbtab &_
							db_APROB_VAC		& vbtab &_
							db_LAST_USR			& vbtab &_
							db_LAST_HOST
						
			obj.controles(nombreGrillaReporte).AgregarFila = filaParaAgregar


			nroFilasLeidas = nroFilasLeidas + 1
			rs.MoveNext
		WEND
		rs.close



		if nroFilasLeidas > 0 then
				if nroFilasLeidas = 1 then
						mensaje = "Se encontró " & nroFilasLeidas & " solo resultado"
					else
						mensaje = "Se encontraron " & nroFilasLeidas & " resultados"
				end if 
				''msg_onWindow  mensaje, msg_Info
				obj.controles("frmFiltrosReporte").refControl.BackColor = rgb(125, 150, 170)
				obj.controles("lblCantResultados").Texto = mensaje

			else
				obj.controles("frmFiltrosReporte").refControl.BackColor = rgb(240, 240, 240)
				obj.controles("lblCantResultados").Texto = "No se encontraron resultados"
		end if 
	end sub






